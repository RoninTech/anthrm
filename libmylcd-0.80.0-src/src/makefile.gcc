
### 
#	libmylcd
#	Michael McElligott
#	okio@users.sourceforge.net
###  

CC = gcc
DLLWRAP = dllwrap
RM = rm -f
AR = ar
CCFLAGS = -I../include/ -std=c99 -Werror -DBUILD_LIB -D__USE_MINGW_ANSI_STDIO=1 -DWINVER=0x0501 -DPTW32_STATIC_LIB -DLIBUSB_BLOCKS -o $@

DEBUG := 0
DEBUGMEMUSAGE := 0
DEBUGFILEIO := 0
LGLCD := 0
SDL := 0
PNG := 0
WIN64 := 0
MMX1 := 0
MMX2 := 0
3DNOW := 0
SSE := 0
INSTALL := ../examples/

# Graphite loop optimizations
GLOP = -ftree-vectorize -floop-interchange -floop-strip-mine -floop-block

ifeq ($(DEBUG),1)
CFLAGSEXTRA =-g -D__DEBUG__ -O3 $(GLOP) -minline-all-stringops -fno-exceptions -fgnu89-inline -funroll-loops -fno-math-errno -ffast-math -fno-strict-aliasing -pipe -fomit-frame-pointer -fvariable-expansion-in-unroller -ftree-loop-distribution -ftree-vectorizer-verbose=1 -finline-functions -fgcse-las -fgcse-sm -fgcse-lm -fmodulo-sched-allow-regmoves -fmodulo-sched 
CFLAGSARCH =   
STRIP =
else
CFLAGSEXTRA = -Wall -O3 $(GLOP) -minline-all-stringops -fno-exceptions -fgnu89-inline -funroll-loops -fno-math-errno -ffast-math -fno-strict-aliasing -pipe -fomit-frame-pointer -fvariable-expansion-in-unroller -ftree-loop-distribution -ftree-vectorizer-verbose=1 -finline-functions -fgcse-las -fgcse-sm -fgcse-lm -fmodulo-sched-allow-regmoves -fmodulo-sched
CFLAGSARCH = 		
STRIP =-s
endif

ifeq ($(DEBUGMEMUSAGE),1)
DBMEMUSAGE =-D__DEBUG_MEMUSAGE__
else
DBMEMUSAGE =
endif

ifeq ($(DEBUGFILEIO),1)
DBFILEIO =-D__DEBUG_SHOWFILEIO__
else
DBFILEIO =
endif

ifeq ($(WIN64),1)
BUILDM32M64 =-m64 -D__WIN64__=1 -DHAVE_STRUCT_TIMESPEC
else
BUILDM32M64 =-m32 -D__WIN32__=1 -D_WIN32_WINNT=0x0501
endif

ifeq ($(LGLCD),1)
LGLCDLIB =../libs-extra/liblglcd.a
LGLCDDLLFLAGS = -DUSELGLCDDLL
else
LGLCDLIB =../libs-extra/304_x86_lglcd.lib
LGLCDDLLFLAGS = 
endif

ifeq ($(SSE),1)
USESSE =-DUSE_SSE -DHAVE_SSE -msse -msse2 -mfpmath=387,sse 
CFLAGSARCH = -march=core2 -mtune=core2
else
USESSE =
endif

ifeq ($(MMX1),1)
USEMMX1 =-DUSE_MMX -DHAVE_MMX -mmmx 
CFLAGSARCH = -march=i686 -mtune=i686
else
USEMMX1 =
endif

ifeq ($(MMX2),1)
USEMMX2 =-DUSE_MMX -DHAVE_MMX -DHAVE_MMX2 -mmmx -mfpmath=387,sse
CFLAGSARCH = -march=pentium4 -mtune=pentium4
else
USEMMX2 =
endif

ifeq ($(3DNOW),1)
USE3DNOW =-DUSE_MMX -DHAVE_MMX -DHAVE_MMX2 -DHAVE_3DNOW -mmmx -m3dnow -mfpmath=387,sse 
CFLAGSARCH = -march=athlon64 -mtune=athlon64
else
USE3DNOW =
endif

ifeq ($(SDL),1)
SDLLIB =-lSDL
else
SDLLIB =
endif

ifeq ($(PNG),1)
PNGLIB =-lpngstatic -lzlib
else
PNGLIB =
endif

ifeq ($(JPG),1)
JPGLIB =../libs-extra/libjpeg.a
else
JPGLIB =
endif



CFLAGS = $(CFLAGSEXTRA) $(CFLAGSARCH) $(BUILDM32M64) $(DBMEMUSAGE) $(DBFILEIO) $(LGLCDDLLFLAGS) $(USEMMX1) $(USEMMX2) $(USE3DNOW) $(USESSE) $(CCFLAGS)
COMPILE = $(CC) $(CFLAGS) -c
ARFLAGS = rc
BASELIBS = -L"lib" -L../libs-extra/ -pipe -mwindows $(SDLLIB) $(PNGLIB) $(JPGLIB) $(LGLCDLIB) -lwinmm -lhid -lsetupapi 
DEPS = ../include/mylcd.h ../include/mylcdconfig.h ../include/mylcdtypes.h
BASESRC =	api.c bdf.c bmp.c cmap.c copy.c draw.c lmath.c fonts.c lcd.c print.c rotate.c\
			pixel.c lpng.c gb2312.c hz.c misc.c frame.c device.c image.c pgm.c jis.c iso2022.c\
			utf.c memory.c fileio.c lstring.c apilock.c convert.c textbdf.c textbitmap.c\
			win_sync.c pth_sync.c sync.c pthreads_dyn.c ljpg.c jpg/jpg.c utf16.c utils.c\
			gb18030.c tga.c chardecode.c scroll.c framec.c\
			null/nullport.c null/nulldisplay.c dlportio/dlp.c\
			openparport/openparport.c ks0108/ks0108.c sed1565/sed1565sio.c\
			sed1565/sed1565pio.c linux/linux.c serial/serial.c ledcard/ledcard.c\
			winio/instdrv.c winio/winiodll.c winio/winio.c\
			ddraw/dd.c ddraw/converter.c ddraw/ddrawdisplay.c\
			display.c ft245/ft245.c t6963c/t6963c.c\
			libusb_dyn.c sdl/lsdl.c sdl/sdldisplay.c\
			usb13700libusb/usb13700_libusb.c usb13700libusb/libusb13700/libusb13700.c\
			usb13700/usb13700exp.c usb13700dll/display_lib_USB13700_dyn.c\
			usbd480dll/USBD480_lib_dyn.c usbd480dll/touch.c usbd480dll/usbd480dll.c\
			usbd480libusb/usbd480.c usbd480libusb/libusbd480/libusbd480.c\
			usbd480hid/usbd480hid.c usbd480libusb/libusbd480/hid.c\
			sed1335/sed1335.c g15/g15display.c g19/g19display.c usb13700dll/usb13700dll.c\
			ftdi/libs/libftdi.c ftdi/ftdi.c g15libusb/g15_libusb.c g15libusb/libg15/libg15.c\
			pcd8544/pcd8544_sio.c pcd8544/pcd8544_spi.c\
			pcf8814/pcf8814_sio.c pcf8814/pcf8814_spi.c\
			pcf8833/pcf8833_spi.c s1d15g10/s1d15g10_spi.c\
			s1d15g14/s1d15g14_sio.c s1d15g14/s1d15g14_spi.c

BASEOBJS = $(BASESRC:.c=.o)

### output filename
DLLOUT=mylcd.dll
STATICOUT=libmylcdstatic.a
DEFFILE=libmylcd.def
LINKLIB=libmylcd.a
INSTALLLOC=$(INSTALL)

DEFAULTOBJS = $(BASEOBJS)
DEFAULTLIBS = $(BASELIBS)
DEFAULTDLL = $(DLLOUT)
DEFAULTDLLOUT = $(DLLOUT)
DEFAULTSTATIC = $(STATICOUT)
DEFAULTSTATICOUT = $(STATICOUT)


### set default build option
all: $(DEFAULTDLL) $(DEFAULTSTATIC)


%.o: %.c $(DEPS)
	$(CC) $(CFLAGS) -c $< 

.c.o:
	$(CC) $(CFLAGS) -c $< -o $(<:.c=.o)

### build .dll
dll: $(DEFAULTDLL)
$(DEFAULTDLL): $(DEFAULTOBJS)
	$(DLLWRAP) $(STRIP) --output-def $(DEFFILE) --implib $(LINKLIB) $(DEFAULTOBJS) $(DEFAULTLIBS) -o $(DEFAULTDLLOUT)
	$(echocmdline)
# --mno-cygwin 
	
### build static lib
static: $(DEFAULTSTATIC)
$(DEFAULTSTATIC): $(DEFAULTOBJS)
	$(AR) $(ARFLAGS) $(DEFAULTSTATICOUT) $(DEFAULTOBJS)
	ranlib $(DEFAULTSTATICOUT)
	@copy "$(DEFAULTSTATICOUT)" "../lib/$(DEFAULTSTATICOUT)"
	$(echocmdline)
	
### copy library to predefine location
install: $(DEFAULTDLL)
	@copy "$(DEFAULTDLLOUT)" "$(INSTALLLOC)" /y
	@copy "$(DEFAULTDLLOUT)" "../lib/$(DEFAULTDLLOUT)"
	@copy "$(LINKLIB)" "../lib/$(LINKLIB)"

### delete object and target files
clean: clean-custom
	${RM} $(BASEOBJS) $(DLLOUT) $(STATICOUT) $(DEFFILE) $(LINKLIB)
	$(RM) "../lib/$(DEFAULTSTATICOUT)"
	$(RM) "../lib/$(DEFAULTDLLOUT)"
	$(RM) "../lib/$(LINKLIB)"

clean-all:
	${RM} $(BASEOBJS) $(DLLOUT) $(STATICOUT) $(DEFFILE) $(LINKLIB)
	$(RM) "../lib/$(DEFAULTSTATICOUT)"
	$(RM) "../lib/$(DEFAULTDLLOUT)"
	$(RM) "../lib/$(LINKLIB)"
	$(RM) "build.bat"

define last-element
$(lastword $(lastword $1),$1)
endef
this-makefile := $(call last-element,$(MAKEFILE_LIST))
other-makefiles := $(filter-out $(this-makefile),$(MAKEFILE_LIST))
parent-makefile := $(call last-element,$(other-makefiles))
dash-f := $(if $(filter-out Makefile makefile GNUmakefile, $(parent-makefile)), -f $(this-makefile))

echocmdline=@echo @rem automatically generated by $(this-makefile) > build.bat &\
	@echo $(MAKE)$(dash-f) $(MAKECMDGOALS) $(MAKEFLAGS) >> build.bat

### PHONY define
.PHONY: all all-before all-after clean clean-all clean-custom

